.TH "cfb.c" 3 "Thu Apr 18 2019" "Version 1.0" "EHN 410 - Group 7 - AES Encryption" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cfb.c \- Cipher Feedback (CFB) - AES implementation file This file contains the implementation of the functions used for the CFB mode of AES encryption\&. This system supports both file and user input encryption, as hex or ascii input\&. If the user inputs data to be encrypted or decrypted, the result will be printed to the terminal, whereas if the user specifies a file to be encrypted or decrypted, a new file will be created and the result will be written to the file\&. The CFB Encryption platform encrypts and decrypts blocks 16 bytes at a time, using 0 padding\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'cfb\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBcfbEncryptFile\fP (unsigned char *fileName, unsigned char *key, unsigned char *initializationVector, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"
.br
.RI "cfbEncryptFile - Function to encrypt the file with name "
.ti -1c
.RI "void \fBcfbDecryptFile\fP (unsigned char *fileName, unsigned char *key, unsigned char *initializationVector, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"
.br
.RI "cfbDecryptFile - Function to decrypt the file with name "
.ti -1c
.RI "void \fBcfbEncrypt\fP (unsigned char *plainText, unsigned char *key, unsigned char *initializationVector, int plainTextLength, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"
.br
.RI "cfbEncrypt - Function to encrypt the user input pointed to by "
.ti -1c
.RI "void \fBcfbDecrypt\fP (unsigned char *cipherText, unsigned char *key, unsigned char *initializationVector, int cipherTextLength, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"
.br
.RI "cfbDecrypt - Function to decrypt the user input pointed to by "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "size_t const \fBshiftRegLength\fP = 16"
.br
.RI "Variable - size_t const shiftRegLength - used to specify the length of the shift register\&. "
.ti -1c
.RI "size_t const \fBstreamSize\fP = 16"
.br
.RI "Variable - size_t const streamSize - used to speciffy the length of the stream per encryption round\&. "
.in -1c
.SH "Detailed Description"
.PP 
Cipher Feedback (CFB) - AES implementation file This file contains the implementation of the functions used for the CFB mode of AES encryption\&. This system supports both file and user input encryption, as hex or ascii input\&. If the user inputs data to be encrypted or decrypted, the result will be printed to the terminal, whereas if the user specifies a file to be encrypted or decrypted, a new file will be created and the result will be written to the file\&. The CFB Encryption platform encrypts and decrypts blocks 16 bytes at a time, using 0 padding\&. 


.PP
\fBAuthors:\fP
.RS 4
Mohamed Ameen Omar (u16055323) 
.PP
Douglas Healy (u16018100) 
.PP
Llewellyn Moyse (u15100708) 
.RE
.PP
\fBVersion:\fP
.RS 4
0\&.1 
.RE
.PP
\fBDate:\fP
.RS 4
2019-03-28
.RE
.PP
\fBCopyright:\fP
.RS 4
Copyright (c) 2019 
.RE
.PP

.PP
Definition in file \fBcfb\&.c\fP\&.
.SH "Function Documentation"
.PP 
.SS "void cfbDecrypt (unsigned char * cipherText, unsigned char * key, unsigned char * initializationVector, int cipherTextLength, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"

.PP
cfbDecrypt - Function to decrypt the user input pointed to by 
.PP
\fBParameters:\fP
.RS 4
\fIcipherText\fP and print decrypted result in hex to terminal\&. Performs decryption using the cfb mode prints the result to the terminal for each block in hex\&. If any input is hex, it will convert it to ascii, perform decryption and print it in hex\&. Makes use of zero padding\&. 
.br
\fIchar\fP - unsigned char* cipherText - the user input to be decrypted\&. 
.br
\fIchar\fP - unsigned char* key - the key to use for decryption\&. 
.br
\fIchar\fP - unsigned char* initializationVector - the initialization vector to use for cfb decryption\&. 
.br
\fIcipherTextLength\fP - int - the length of the ciphertext to be encrypted in 
.br
\fIcipherText\&.\fP 
.br
\fIkeyLength\fP - int - the length of the key specified in 
.br
\fIkey\&.\fP 
.br
\fIinitializationVectorLength\fP - int - the length of the key specified in 
.br
\fIinitializationVector\&.\fP 
.br
\fIisTextHex\fP - int - boolean used to signify whether the file pointed to by 
.br
\fIfileName\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisKeyHex\fP - int - boolean used to signify whether the key pointed to by 
.br
\fIkey\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisIvHex\fP - int - boolean used to signify whether the IV pointed to by 
.br
\fIinitializationVector\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.RE
.PP

.PP
Definition at line 550 of file cfb\&.c\&.
.SS "void cfbDecryptFile (unsigned char * fileName, unsigned char * key, unsigned char * initializationVector, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"

.PP
cfbDecryptFile - Function to decrypt the file with name 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP and write the decrypted version to file with cfbDecrypted appended to the original filename\&. Performs decryption using the cfb mode and writes the result to a file\&. If any input is hex, it will convert it to ascii, perform decryption and write it back to the file in the same format as the input\&. That is if the input file was a hexString, the decrypted file will also contain a hex string\&. All terminal output, however, will be hex\&. Makes use of zero padding\&. 
.br
\fIchar\fP - unsigned char* fileName - the path to the file to be decrypted 
.br
\fIchar\fP - unsigned char* key - the key to use for decryption\&. 
.br
\fIchar\fP - unsigned char* initializationVector - the initialization vector to use for cfb decryption 
.br
\fIkeyLength\fP - int - the length of the key specified in 
.br
\fIkey\&.\fP 
.br
\fIinitializationVectorLength\fP - int - the length of the key specified in 
.br
\fIinitializationVector\&.\fP 
.br
\fIisTextHex\fP - int - boolean used to signify whether the file pointed to by 
.br
\fIfileName\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisKeyHex\fP - int - boolean used to signify whether the key pointed to by 
.br
\fIkey\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisIvHex\fP - int - boolean used to signify whether the IV pointed to by 
.br
\fIinitializationVector\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.RE
.PP

.PP
Definition at line 221 of file cfb\&.c\&.
.SS "void cfbEncrypt (unsigned char * plainText, unsigned char * key, unsigned char * initializationVector, int plainTextLength, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"

.PP
cfbEncrypt - Function to encrypt the user input pointed to by 
.PP
\fBParameters:\fP
.RS 4
\fIplainText\fP and print encrypted result in hex to terminal\&. Performs encryption using the cfb mode prints the result to the terminal for each block in hex\&. If any input is hex, it will convert it to ascii, perform encryption and print it in hex\&. Makes use of zero padding\&. 
.br
\fIchar\fP - unsigned char* plainText - the user input to be encrypted\&. 
.br
\fIchar\fP - unsigned char* key - the key to use for encryption\&. 
.br
\fIchar\fP - unsigned char* initializationVector - the initialization vector to use for cfb encryption 
.br
\fIplainTextLength\fP - - int - the length of the plaintext to be encrypted in 
.br
\fIplainText\&.\fP 
.br
\fIkeyLength\fP - int - the length of the key specified in 
.br
\fIkey\&.\fP 
.br
\fIinitializationVectorLength\fP - int - the length of the key specified in 
.br
\fIinitializationVector\&.\fP 
.br
\fIisTextHex\fP - int - boolean used to signify whether the file pointed to by 
.br
\fIfileName\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisKeyHex\fP - int - boolean used to signify whether the key pointed to by 
.br
\fIkey\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisIvHex\fP - int - boolean used to signify whether the IV pointed to by 
.br
\fIinitializationVector\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.RE
.PP

.PP
Definition at line 405 of file cfb\&.c\&.
.SS "void cfbEncryptFile (unsigned char * fileName, unsigned char * key, unsigned char * initializationVector, int keyLength, int initializationVectorLength, int isTextHex, int isKeyHex, int isIvHex)"

.PP
cfbEncryptFile - Function to encrypt the file with name 
.PP
\fBParameters:\fP
.RS 4
\fIfileName\fP and write the encrypted version to file with cfbEncrypted appended to the original filename\&. Performs encryption using the cfb mode and writes the result to a file\&. If any input is hex, it will convert it to ascii, perform encryption and write it back as ASCII\&. All terminal output, however, will be hex\&. Makes use of zero padding\&. 
.br
\fIchar\fP - unsigned char* fileName - the path to the file to be encrypted 
.br
\fIchar\fP - unsigned char* key - the key to use for encryption\&. 
.br
\fIchar\fP - unsigned char* initializationVector - the initialization vector to use for cfb encryption 
.br
\fIkeyLength\fP - int - the length of the key specified in 
.br
\fIkey\&.\fP 
.br
\fIinitializationVectorLength\fP - int - the length of the key specified in 
.br
\fIinitializationVector\&.\fP 
.br
\fIisTextHex\fP - int - boolean used to signify whether the file pointed to by 
.br
\fIfileName\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisKeyHex\fP - int - boolean used to signify whether the key pointed to by 
.br
\fIkey\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.br
\fIisIvHex\fP - int - boolean used to signify whether the IV pointed to by 
.br
\fIinitializationVector\fP is a hexString or ASCII string\&. (1 = file is a hexString) 
.RE
.PP

.PP
Definition at line 46 of file cfb\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for EHN 410 - Group 7 - AES Encryption from the source code\&.
